# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
library(car)
mosaicGG(Vocab, "education", "vocabulary" )
install.packages("ggthemes")
library(ggthemes)
# Load all packages
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
library(car)
mosaicGG(Vocab, "education", "vocabulary" )
library(adult)
install.packages(haven)
install.packages("haven")
library("haven", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(car)
# Load all packages
library(haven)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
# Importing SPSS data file to R
adult <- read_spss("~Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
library(car)
mosaicGG(Vocab, "education", "vocabulary" )
adult <- read_spss("~Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
# Load all packages
library(haven)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
# Importing SPSS data file to R
adult <- read_spss("~/Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
library(car)
mosaicGG(Vocab, "education", "vocabulary" )
install.packages("car")
# Load all packages
library(haven)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
library(car)
# Importing SPSS data file to R
adult <- read_spss("~/Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
mosaicGG(Vocab, "education", "vocabulary" )
---
title: "CHIS Exercise"
author: "Swati Jani Joshi"
date: "July 9, 2016"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## CHIS
This is the solution to the CHIS exercise from Data Camp
### Load all packages
library(haven)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
library(car)
### Importing SPSS data file to R
adult <- read_spss("~/Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
### Script generalized into a function
mosaicGG <- function(data, X, FILL) {
#### Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
### Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
### Merge data
DF_all <- merge(DF_melted, resid)
### Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
### Plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
### BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
### Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
### mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
### Vocab: vocabulary described by education
mosaicGG(Vocab, "education", "vocabulary" )
# Load all packages
library(haven)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
library(car)
# Importing SPSS data file to R
adult <- read_spss("~/Documents/Data Visualization/chis09_adult_spss/chis09_adult_spss/ADULT.sav")
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P","POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
mosaicGG(Vocab, "education", "vocabulary" )
head(DF_all)
head(DF_melted)
head(adult)
head(mtcars)
head(Vocab)
getwd()
setwd("/Users/Swati/Documents/Springboard Capstone Project/Data Files")
zika <- read.csv("~/Documents/Springboard Capstone Project/Data Files/cdc_zika.csv")
str(zika)
zika$value <-as.numeric(zika$value)
zika$report_date <-as.Date(zika$report_date)
?strsplit
zika$country <- sapply(zika$location, function(x) strsplit(x, '-')[[1]][1])
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
zika$country <- sapply(zika$location, function(x) strsplit(x, '-')[[1]][1])
zika$country <- sapply(zika$location, function(x) strsplit(x, '-')[[1]][1])
zika$country <- sapply(zika$location, function(x) strsplit(x, '-')[[1]][1])
zika$country <- sapply(zika$location, function(x) strsplit(x, "-")[[1]][1])
?strsplit
read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
Mean Pregnancies <- mean(diabetes$Pregnancies)
Mean_Pregnancies <- mean(diabetes$Pregnancies)
Mean_Pregnancies
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, NA)})
diabetes$Glucose
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
for(i in 2:6) {}
for(i in 2:6) { diabetes <- lapply(diabetes, function(x){replace(x,x==0, NA)})}
str(diabetes)
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
diabetes$Glucose <- diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x,x==0, NA)})}
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x,x==0, NA)})}
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x,x==0, NA)})
str(diabetes)
diabetes$BloodPressure <- lapply(diabetes$BloodPressure, function(x){replace(x,x==0, NA)})
str(diabetes)
hist(diabetes$pregnancies)
is.numeric(diabetes$Pregnancies)
hist(diabetes$pregnancies)
?hist
for (i in 2:6) {
diabetes1 <- diabetes[-which(diabetes[, i] == 0), ]
}
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
for (i in 2:6) {
diabetes1 <- diabetes[-which(diabetes[, i] == 0), ]
}
for (i in 2:6) {
diabetes1 <- diabetes[-which(diabetes[, i] == 0), ]}
str(diabetes1)
Mean_Db_Glucose <- mean(diabetes1$Glucose)
Mean_Db_BloodPressure <- mean(diabetes1$BloodPressure)
Mean_Db_SkinThickness <- mean(diabetes1$SkinThickness)
Mean_Db_Insulin <- mean(diabetes1$Insulin)
Mean_Db_BMI <- mean(diabetes1$BMI)
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
diabetes$SkinThickness <- lapply(diabetes$SkinThickness, function(x){replace(x, x == 0, Mean_Db_Glucose)})
str(diabetes)
hist(diabetes$Glucose)
diabetes$Glucose <- is.numeric(diabetes$Glucose)
str(diabetes)
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
is.numeric(diabetes$Glucose)
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
is.numeric(diabetes$Glucose)
as.numeric(diabetes$Glucose)
is.numeric(diabetes$Glucose)
hist(diabetes$Glucose)
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
diabetes$Glucose
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
is.character(diabetes$Glucose)
diabetes$Glucose
as.numeric(diabetes$Glucose)
diabetes$Glucose
diabetes$Glucose <- as.numeric(diabetes$Glucose)
is.numeric(diabetes$Glucose)
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
diabetes$SkinThickness <- lapply(diabetes$SkinThickness, function(x){replace(x, x == 0, Mean_Db_Glucose)})
diabetes$BloodPressure <- lapply(diabetes$BloodPressure, function(x){replace(x, x == 0, Mean_Db_SkinThickness)})
diabetes$BloodPressure <- lapply(diabetes$BloodPressure, function(x){replace(x, x == 0, Mean_Db_BloodPressure)})
diabetes$Insulin <- lapply(diabetes$Insulin, function(x){replace(x, x == 0, Mean_Db_Insulin)})
diabetes$BMI <- lapply(diabetes$BMI, function(x){replace(x, x == 0, Mean_Db_BMI)})
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
diabetes$Outcome <- factor(diabetes$Outcome)
for (i in 2:6) {
diabetes1 <- diabetes[-which(diabetes[,i] ==0), ]}
str(diabetes1)
dMean_Db_Glucose <- mean(diabetes1$Glucose)
Mean_Db_BloodPressure <- mean(diabetes1$BloodPressure)
Mean_Db_SkinThickness <- mean(diabetes1$SkinThickness)
Mean_Db_Insulin <- mean(diabetes1$Insulin)
Mean_Db_BMI <- mean(diabetes1$BMI)
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
diabetes$SkinThickness <- lapply(diabetes$SkinThickness, function(x){replace(x, x == 0, Mean_Db_SkinThickness)})
diabetes$BloodPressure <- lapply(diabetes$BloodPressure, function(x){replace(x, x == 0, Mean_Db_BloodPressure)})
diabetes$Insulin <- lapply(diabetes$Insulin, function(x){replace(x, x == 0, Mean_Db_Insulin)})
diabetes$BMI <- lapply(diabetes$BMI, function(x){replace(x, x == 0, Mean_Db_BMI)})
diabetes$Glucose <- as.numeric(diabetes$Glucose)
diabetes$SkinThickness <- as.numeric(diabetes$SkinThickness)
diabetes$BloodPressure <- as.numeric(diabetes$BloodPressure)
diabetes$Insulin <- as.numeric(diabetes$Insulin)
diabetes$BMI <- as.numeric(diabetes$BMI)
hist(diabetes$pregnancies)
hist(diabetes$age)
hist(diabetes$glucose)
hist(diabetes$bmi)
diabetes <- read.csv("~/Documents/Springboard Capstone Project/Data Files/diabetes.csv")
str(diabetes)
diabetes$Outcome <- factor(diabetes$Outcome)
for (i in 2:6) {
diabetes1 <- diabetes[-which(diabetes[,i] ==0), ]}
str(diabetes1)
dMean_Db_Glucose <- mean(diabetes1$Glucose)
Mean_Db_BloodPressure <- mean(diabetes1$BloodPressure)
Mean_Db_SkinThickness <- mean(diabetes1$SkinThickness)
Mean_Db_Insulin <- mean(diabetes1$Insulin)
Mean_Db_BMI <- mean(diabetes1$BMI)
diabetes$Glucose <- lapply(diabetes$Glucose, function(x){replace(x, x == 0, Mean_Db_Glucose)})
diabetes$SkinThickness <- lapply(diabetes$SkinThickness, function(x){replace(x, x == 0, Mean_Db_SkinThickness)})
diabetes$BloodPressure <- lapply(diabetes$BloodPressure, function(x){replace(x, x == 0, Mean_Db_BloodPressure)})
diabetes$Insulin <- lapply(diabetes$Insulin, function(x){replace(x, x == 0, Mean_Db_Insulin)})
diabetes$BMI <- lapply(diabetes$BMI, function(x){replace(x, x == 0, Mean_Db_BMI)})
diabetes$Glucose <- as.numeric(diabetes$Glucose)
diabetes$SkinThickness <- as.numeric(diabetes$SkinThickness)
diabetes$BloodPressure <- as.numeric(diabetes$BloodPressure)
diabetes$Insulin <- as.numeric(diabetes$Insulin)
diabetes$BMI <- as.numeric(diabetes$BMI)
hist(diabetes$Pregnancies)
hist(diabetes$Age)
hist(diabetes$Glucose)
hist(diabetes$BMI)
diabetes
?set.seed
